#!/bin/bash

dotfiles_script="$0"
dotfiles_dir="$HOME/dotfiles"
hooks_dir="$dotfiles_dir/@hooks"

if ! command -v hostname &> /dev/null; then
  machine_hostname="$(cat /etc/hostname)"
else
  machine_hostname="$(hostname)"
fi

export DOTFILES_CONFIG_DIR="$HOME/.config/dotfiles"
if [ ! -d "$DOTFILES_CONFIG_DIR" ]; then
  mkdir -p "$DOTFILES_CONFIG_DIR"
fi

help-msg() {
  echo "Usage: $0 <command> [options]"
  echo
  echo "Commands:"
  echo "  stow <package> [package2] ... [packagen] --args"
  echo "    Stow the specified package(s), passing --args to stow"
  echo
  echo "  unstow <package> [package2] ... [packagen] --args"
  echo "    Unstow the specified package(s), passing --args to stow"
  echo
  echo "  adopt <package> [package2] ... [packagen] --args"
  echo "    Adopt the specified package(s), passing --args to stow"
  echo
  echo "  restow <package> [package2] ... [packagen] --args"
  echo "    Restow the specified package(s)"
  echo
  echo "  branch-out"
  echo "    Create a new branch with the machine hostname"
  echo
  echo "  pull-master"
  echo "    Pull the latest changes from the master branch and rebase the current branch"
  echo
  echo "  git <git-command>"
  echo "    Run a git command in the dotfiles repository"
  echo
}

dotfiles-git() {
  git --git-dir="$dotfiles_dir/.git" --work-tree="$dotfiles_dir" "$@"
}

dotfiles-stow() {
  stow -t "$HOME" -d "$dotfiles_dir" --ignore='@.*' "$@"
}

# If there is no output, the package is stowed
package-is-stowed() {
  local package="$1"
  dotfiles-stow -n $1  2>&1 | grep -v "WARNING"
}

stow-dependencies() {
  local package="$1"
  local dependencies_file="$dotfiles_dir/$package/@depends"

  if [ -f "$dependencies_file" ]; then
    local dependencies="$(cat $dependencies_file)"

    echo "Package $package depends on:"
    for dependency in $dependencies; do
      echo "  * $dependency"
    done
    read -p "Do you want to stow them? [y/N] " -n 1 -r answer
    echo

    if [[ ! $answer =~ ^[Yy]$ ]]; then
      echo "Skipping dependencies"
      return 0
    fi

    echo "Going into dependencies:"
    for dependency in $dependencies; do
      if [ -z "$(package-is-stowed $dependency)" ]; then
        echo "Dependency $dependency is already stowed"
      else
        $dotfiles_script stow $dependency
      fi
    done
  fi
}

unstow-dependencies() {
  local package="$1"
  local dependencies_file="$dotfiles_dir/$package/@depends"

  if [ -f "$dependencies_file" ]; then
    local dependencies="$(cat $dependencies_file)"

    echo "Package $package depends on:"
    for dependency in $dependencies; do
      echo "  * $dependency"
    done
    read -p "Do you want to unstow them? [y/N] " -n 1 -r answer
    echo

    if [[ ! $answer =~ ^[Yy]$ ]]; then
      echo "Skipping dependencies"
      return 0
    fi

    echo "Going into dependencies:"
    for dependency in $dependencies; do
      if [ -n "$(package-is-stowed $dependency)" ]; then
        echo "Dependency $dependency is not stowed"
      else
        $dotfiles_script unstow $dependency
      fi
    done
  fi
}

run-hook() {
  local package="$1"
  local hook="$2"
  local current_dir="$(pwd)"

  cd "$HOME"
  if [ -f "$hooks_dir/$package/$hook" ]; then
      "$hooks_dir/$package/$hook"
  fi
  cd "$current_dir"
}

case "$1" in
  "stow")
    shift
    if [ -z "$(package-is-stowed $1)" ]; then
      echo "Package $1 is already stowed"
      exit 0
    fi
    stow-dependencies $1
    run-hook "$1" "pre-stow"
    dotfiles-stow --no-folding $@
    run-hook "$1" "post-stow"
    exit 0
    ;;
  "unstow")
    shift
    unstow-dependencies $1
    run-hook "$1" "pre-unstow"
    dotfiles-stow -D $@ 2>&1 | grep -v 'BUG'
    run-hook "$1" "post-unstow"
    exit 0
    ;;
  "adopt")
    shift
    dotfiles-stow --adopt $@
    exit 0
    ;;
  "restow")
    shift
    dotfiles-stow --restow $@
    exit 0
    ;;
  "branch-out")
    dotfiles-git checkout -b "$machine_hostname"
    exit 0
    ;;
  "pull-master")
    dotfiles-git checkout master
    dotfiles-git pull
    dotfiles-git checkout "$machine_hostname"
    dotfiles-git rebase master
    exit 0
    ;;
  "git")
    shift
    dotfiles-git $@
    ;;
  *)
    help-msg
    exit 1
    ;;
esac



# vim:set softtabstop=2 shiftwidth=2 expandtab:
